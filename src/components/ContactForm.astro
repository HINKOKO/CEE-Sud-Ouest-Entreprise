---
const formSpreeID = import.meta.env.PUBLIC_FORMSPREE_ID
---
<section id="contact"
         class="bg-white text-gray-800 py-16 px-4 inset-shadow-amber-200 shadow-2xl"
         x-data="contactForm()"
         data-formspree-id={formSpreeID}>

    <div class="max-w-4xl mx-auto text-center">
        <h2 class="text-3xl md:text-5xl mb-6 ">Parlons de votre projet</h2>

        <form @submit.prevent="submitForm" class="space-y-6 text-left">
          <!-- HoneyPot -->
           <input type="text" name="_gotcha" x-model="honeypot" class="hidden" />
          <!-- Nom  -->
          <div>
            <label for="name" class="block mb-2 font-semibold">Nom</label>
            <input
              type="text" 
              id="name" 
              name="name" 
              x-model="name"
              required
              class="w-full px-4 py-3 rounded-xl border border-gray-400 focus:outline-none focus:ring-2 focus:ring-amber-500 transition"
            />
          </div>

          <!-- Email -->
          <div>
            <label for="email" class="block mb-2 font-semibold">Addresse mail</label>
            <input
              type="text"
              id="email"
              name="email"
              x-model="email"
              required
              class="w-full px-4 py-3 rounded-xl border border-gray-400 focus:outline-none focus:ring-2 focus:ring-amber-500 transition"
            />
          </div>
        
        <!-- Message -->
        <div>
            <label for="message" class="block mb-2 font-semibold">Votre message</label>
            <textarea
              id="message"
              name="message"
              x-model="message"
              required
              class="w-full px-4 py-3 rounded-xl border border-gray-400 focus:outline-none focus:ring-2 focus:ring-amber-500 transition"
            ></textarea>
        </div>


        <template x-if="error">
          <p class="text-red-500 font-semibold text-center" x-text="error"></p>
        </template>
        <template x-if="success">
          <p class="text-green-600 font-semibold text-center">Message envoy√© avec succ√®s ! Merci üôè</p>
        </template>

        <!-- Button for sending -->
         <div class="text-center pt-6">
            <button
               type="submit" 
               :disabled="cooldown"
               :class="cooldown ? 'opacity-50 cursor-not-allowed' : ''"
                class="bg-amber-600 text-xl font-semibold px-10 py-4 rounded-2xl text-white ring-2 ring-amber-400 ring-offset-4
                           transition-all duration-300 ease-in-out hover:-translate-y-1 hover:scale-105
                           active:translate-y-0 active:scale-95 active:ring-offset-2"        
            >
              Envoyer
            </button>
         </div>
        </form>
      </div>
      <!-- Lien vers page contact  -->
      <div class="mt-6 text-center text-amber-100 font-lg w-2/3 mx-auto bg-[#4648ae] rounded-2xl py-4 px-6 ring-2 ring-offset-2">
        <a href="/contact">Besoin de renseigner d'avantage d'informations? c'est par ici &#128073;</a>
      </div>
</section>

<script is:inline>
  window.contactForm = function() {
    const formSpreeID = document.querySelector('#contact')?.dataset.formspreeId || '';
    console.log(formSpreeID);
    return {
      name: '',
      email: '',
      message: '',
      honeypot: '',
      success: false,
      error: '',
      cooldown: false,

      submitForm() {
        this.error = ''
        this.success = false

        // Anti-bot: honeypot
        if (this.honeypot) {
          this.error = "Bot d√©tect√© üò¨";
          return;
        }

        // Cooldown via localStorage (2 min)
        const lastSent = localStorage.getItem("lastSent");
        if (lastSent && Date.now() - lastSent < 120000) {
          this.error = "Merci d‚Äôattendre un peu avant de renvoyer un message üôè";
          return;
        }

        // Email validation simple
        const validEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!validEmail.test(this.email)) {
          this.error = "Adresse e-mail invalide.";
          return;
        }

        // Emp√™che spam clics
        this.cooldown = true;
        setTimeout(() => this.cooldown = false, 15000);

        // Simule l‚Äôenvoi avec Formspree ou autre endpoint
        fetch(`https://formspree.io/f/${formSpreeID}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            name: this.name,
            email: this.email,
            message: this.message,
          }),
        })
        .then(res => {
          if (res.ok) {
            this.success = true;
            localStorage.setItem("lastSent", Date.now());
            this.name = '';
            this.email = '';
            this.message = '';
          } else {
            this.error = "Erreur lors de l'envoi. R√©essayez plus tard.";
          }
        })
        .catch(() => {
          this.error = "Erreur r√©seau. R√©essayez plus tard.";
        });
      }
    }
  }
</script>


